from os import urandom
from hashlib import sha1
from Crypto.Util.number import bytes_to_long, long_to_bytes
from binascii import hexlify

x = 84787875451523485345374151237212499999999999

p = 89884656743115795389374444357965596041707103579335619241165156429225502365521439025499103971147870579637910013872240481446642759865727715143856448882853102298215102584779112052046581658273396430166671654945955572937243406324990511517175949775424708250369373972195526071010722126994053027079640824789677194681
q = 838114989280207343931101099984559960927246139967
g = 81276779940548524670494254192706613917067069432886996156070646492653656558343240172021379272918460788370332639784438273863095242075038574780575863033117339765921362764295832142292157994542582821081221019750571423117394603653210942993984937508928164068015833890842969704124928271625205241823140934184765854933

def myrandom(k):
    length = k.bit_length() // 8 + 2
    tmp = bytes_to_long(urandom(length))
    return tmp % k

def hash(m):
    return int(sha1(m).hexdigest(), 16)

def sign(m):
    k = myrandom(q)
    k ^= (k&0xff)
    assert k > 1
    r = pow(g, k, p) % q
    assert r != 0
    s = pow(k,q-2,q) * (hash(m)+x*r) % q
    assert s != 0
    return r, s

with open("sign","wb") as f:
    for i in range(25):
        m = urandom(16)
        r, s = sign(m)
        f.write('{} {} {}\n'.format(hexlify(m).decode(), r, s).encode())

print ("flag is 0ops{"+hex(x)[2:].strip("L")+"}")